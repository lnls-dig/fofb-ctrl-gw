-- Do not edit.  Generated by cheby 1.6.dev0 using these options:
--  -i wb_fofb_shaper_filt_regs.cheby --hdl vhdl --gen-hdl wb_fofb_shaper_filt_regs.vhd --doc html --gen-doc doc/wb_fofb_shaper_filt_regs.html --gen-c wb_fofb_shaper_filt_regs.h --consts-style vhdl-ohwr --gen-consts ../../../sim/regs/wb_fofb_shaper_filt_regs_consts_pkg.vhd
-- Generated on Tue Apr 09 10:23:32 2024 by guilherme.ricioli


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wishbone_pkg.all;

entity wb_fofb_shaper_filt_regs is
  port (
    rst_n_i              : in    std_logic;
    clk_i                : in    std_logic;
    wb_i                 : in    t_wishbone_slave_in;
    wb_o                 : out   t_wishbone_slave_out;

    -- SRAM bus ch_0_coeffs
    ch_0_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_0_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_0_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_0_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_1_coeffs
    ch_1_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_1_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_1_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_1_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_2_coeffs
    ch_2_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_2_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_2_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_2_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_3_coeffs
    ch_3_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_3_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_3_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_3_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_4_coeffs
    ch_4_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_4_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_4_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_4_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_5_coeffs
    ch_5_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_5_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_5_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_5_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_6_coeffs
    ch_6_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_6_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_6_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_6_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_7_coeffs
    ch_7_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_7_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_7_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_7_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_8_coeffs
    ch_8_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_8_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_8_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_8_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_9_coeffs
    ch_9_coeffs_addr_o   : out   std_logic_vector(7 downto 2);
    ch_9_coeffs_data_i   : in    std_logic_vector(31 downto 0);
    ch_9_coeffs_data_o   : out   std_logic_vector(31 downto 0);
    ch_9_coeffs_wr_o     : out   std_logic;

    -- SRAM bus ch_10_coeffs
    ch_10_coeffs_addr_o  : out   std_logic_vector(7 downto 2);
    ch_10_coeffs_data_i  : in    std_logic_vector(31 downto 0);
    ch_10_coeffs_data_o  : out   std_logic_vector(31 downto 0);
    ch_10_coeffs_wr_o    : out   std_logic;

    -- SRAM bus ch_11_coeffs
    ch_11_coeffs_addr_o  : out   std_logic_vector(7 downto 2);
    ch_11_coeffs_data_i  : in    std_logic_vector(31 downto 0);
    ch_11_coeffs_data_o  : out   std_logic_vector(31 downto 0);
    ch_11_coeffs_wr_o    : out   std_logic;

    -- Maximum filter order supported by the gateware.

    max_filt_order_i     : in    std_logic_vector(31 downto 0);

    -- Fixed-point signed representation of coefficients.
    -- The coefficients should be aligned to the left. The fixed-point
    -- position is then given by 32 - 'int_width' (i.e. one should divide
    -- this register's content by 2**{32 - 'int_width'} to get the
    -- represented decimal number.

    -- Integer width (accounting for the signal bit).

    coeffs_fp_repr_int_width_i : in    std_logic_vector(4 downto 0);
    -- Fractionary width.

    coeffs_fp_repr_frac_width_i : in    std_logic_vector(4 downto 0)
  );
end wb_fofb_shaper_filt_regs;

architecture syn of wb_fofb_shaper_filt_regs is
  signal adr_int                        : std_logic_vector(12 downto 2);
  signal rd_req_int                     : std_logic;
  signal wr_req_int                     : std_logic;
  signal rd_ack_int                     : std_logic;
  signal wr_ack_int                     : std_logic;
  signal wb_en                          : std_logic;
  signal ack_int                        : std_logic;
  signal wb_rip                         : std_logic;
  signal wb_wip                         : std_logic;
  signal ch_0_coeffs_rack               : std_logic;
  signal ch_0_coeffs_re                 : std_logic;
  signal ch_1_coeffs_rack               : std_logic;
  signal ch_1_coeffs_re                 : std_logic;
  signal ch_2_coeffs_rack               : std_logic;
  signal ch_2_coeffs_re                 : std_logic;
  signal ch_3_coeffs_rack               : std_logic;
  signal ch_3_coeffs_re                 : std_logic;
  signal ch_4_coeffs_rack               : std_logic;
  signal ch_4_coeffs_re                 : std_logic;
  signal ch_5_coeffs_rack               : std_logic;
  signal ch_5_coeffs_re                 : std_logic;
  signal ch_6_coeffs_rack               : std_logic;
  signal ch_6_coeffs_re                 : std_logic;
  signal ch_7_coeffs_rack               : std_logic;
  signal ch_7_coeffs_re                 : std_logic;
  signal ch_8_coeffs_rack               : std_logic;
  signal ch_8_coeffs_re                 : std_logic;
  signal ch_9_coeffs_rack               : std_logic;
  signal ch_9_coeffs_re                 : std_logic;
  signal ch_10_coeffs_rack              : std_logic;
  signal ch_10_coeffs_re                : std_logic;
  signal ch_11_coeffs_rack              : std_logic;
  signal ch_11_coeffs_re                : std_logic;
  signal rd_ack_d0                      : std_logic;
  signal rd_dat_d0                      : std_logic_vector(31 downto 0);
  signal wr_req_d0                      : std_logic;
  signal wr_adr_d0                      : std_logic_vector(12 downto 2);
  signal wr_dat_d0                      : std_logic_vector(31 downto 0);
  signal ch_0_coeffs_wp                 : std_logic;
  signal ch_0_coeffs_we                 : std_logic;
  signal ch_1_coeffs_wp                 : std_logic;
  signal ch_1_coeffs_we                 : std_logic;
  signal ch_2_coeffs_wp                 : std_logic;
  signal ch_2_coeffs_we                 : std_logic;
  signal ch_3_coeffs_wp                 : std_logic;
  signal ch_3_coeffs_we                 : std_logic;
  signal ch_4_coeffs_wp                 : std_logic;
  signal ch_4_coeffs_we                 : std_logic;
  signal ch_5_coeffs_wp                 : std_logic;
  signal ch_5_coeffs_we                 : std_logic;
  signal ch_6_coeffs_wp                 : std_logic;
  signal ch_6_coeffs_we                 : std_logic;
  signal ch_7_coeffs_wp                 : std_logic;
  signal ch_7_coeffs_we                 : std_logic;
  signal ch_8_coeffs_wp                 : std_logic;
  signal ch_8_coeffs_we                 : std_logic;
  signal ch_9_coeffs_wp                 : std_logic;
  signal ch_9_coeffs_we                 : std_logic;
  signal ch_10_coeffs_wp                : std_logic;
  signal ch_10_coeffs_we                : std_logic;
  signal ch_11_coeffs_wp                : std_logic;
  signal ch_11_coeffs_we                : std_logic;
begin

  -- WB decode signals
  adr_int <= wb_i.adr(12 downto 2);
  wb_en <= wb_i.cyc and wb_i.stb;

  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        wb_rip <= '0';
      else
        wb_rip <= (wb_rip or (wb_en and not wb_i.we)) and not rd_ack_int;
      end if;
    end if;
  end process;
  rd_req_int <= (wb_en and not wb_i.we) and not wb_rip;

  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        wb_wip <= '0';
      else
        wb_wip <= (wb_wip or (wb_en and wb_i.we)) and not wr_ack_int;
      end if;
    end if;
  end process;
  wr_req_int <= (wb_en and wb_i.we) and not wb_wip;

  ack_int <= rd_ack_int or wr_ack_int;
  wb_o.ack <= ack_int;
  wb_o.stall <= not ack_int and wb_en;
  wb_o.rty <= '0';
  wb_o.err <= '0';

  -- pipelining for wr-in+rd-out
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        rd_ack_int <= '0';
        wr_req_d0 <= '0';
      else
        rd_ack_int <= rd_ack_d0;
        wb_o.dat <= rd_dat_d0;
        wr_req_d0 <= wr_req_int;
        wr_adr_d0 <= adr_int;
        wr_dat_d0 <= wb_i.dat;
      end if;
    end if;
  end process;

  -- Interface ch_0_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_0_coeffs_rack <= '0';
      else
        ch_0_coeffs_rack <= ch_0_coeffs_re and not ch_0_coeffs_rack;
      end if;
    end if;
  end process;
  ch_0_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_0_coeffs_wp <= '0';
      else
        ch_0_coeffs_wp <= (wr_req_d0 or ch_0_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_0_coeffs_we <= (wr_req_d0 or ch_0_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_0_coeffs_re) begin
    if ch_0_coeffs_re = '1' then
      ch_0_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_0_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_1_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_1_coeffs_rack <= '0';
      else
        ch_1_coeffs_rack <= ch_1_coeffs_re and not ch_1_coeffs_rack;
      end if;
    end if;
  end process;
  ch_1_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_1_coeffs_wp <= '0';
      else
        ch_1_coeffs_wp <= (wr_req_d0 or ch_1_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_1_coeffs_we <= (wr_req_d0 or ch_1_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_1_coeffs_re) begin
    if ch_1_coeffs_re = '1' then
      ch_1_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_1_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_2_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_2_coeffs_rack <= '0';
      else
        ch_2_coeffs_rack <= ch_2_coeffs_re and not ch_2_coeffs_rack;
      end if;
    end if;
  end process;
  ch_2_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_2_coeffs_wp <= '0';
      else
        ch_2_coeffs_wp <= (wr_req_d0 or ch_2_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_2_coeffs_we <= (wr_req_d0 or ch_2_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_2_coeffs_re) begin
    if ch_2_coeffs_re = '1' then
      ch_2_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_2_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_3_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_3_coeffs_rack <= '0';
      else
        ch_3_coeffs_rack <= ch_3_coeffs_re and not ch_3_coeffs_rack;
      end if;
    end if;
  end process;
  ch_3_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_3_coeffs_wp <= '0';
      else
        ch_3_coeffs_wp <= (wr_req_d0 or ch_3_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_3_coeffs_we <= (wr_req_d0 or ch_3_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_3_coeffs_re) begin
    if ch_3_coeffs_re = '1' then
      ch_3_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_3_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_4_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_4_coeffs_rack <= '0';
      else
        ch_4_coeffs_rack <= ch_4_coeffs_re and not ch_4_coeffs_rack;
      end if;
    end if;
  end process;
  ch_4_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_4_coeffs_wp <= '0';
      else
        ch_4_coeffs_wp <= (wr_req_d0 or ch_4_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_4_coeffs_we <= (wr_req_d0 or ch_4_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_4_coeffs_re) begin
    if ch_4_coeffs_re = '1' then
      ch_4_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_4_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_5_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_5_coeffs_rack <= '0';
      else
        ch_5_coeffs_rack <= ch_5_coeffs_re and not ch_5_coeffs_rack;
      end if;
    end if;
  end process;
  ch_5_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_5_coeffs_wp <= '0';
      else
        ch_5_coeffs_wp <= (wr_req_d0 or ch_5_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_5_coeffs_we <= (wr_req_d0 or ch_5_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_5_coeffs_re) begin
    if ch_5_coeffs_re = '1' then
      ch_5_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_5_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_6_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_6_coeffs_rack <= '0';
      else
        ch_6_coeffs_rack <= ch_6_coeffs_re and not ch_6_coeffs_rack;
      end if;
    end if;
  end process;
  ch_6_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_6_coeffs_wp <= '0';
      else
        ch_6_coeffs_wp <= (wr_req_d0 or ch_6_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_6_coeffs_we <= (wr_req_d0 or ch_6_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_6_coeffs_re) begin
    if ch_6_coeffs_re = '1' then
      ch_6_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_6_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_7_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_7_coeffs_rack <= '0';
      else
        ch_7_coeffs_rack <= ch_7_coeffs_re and not ch_7_coeffs_rack;
      end if;
    end if;
  end process;
  ch_7_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_7_coeffs_wp <= '0';
      else
        ch_7_coeffs_wp <= (wr_req_d0 or ch_7_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_7_coeffs_we <= (wr_req_d0 or ch_7_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_7_coeffs_re) begin
    if ch_7_coeffs_re = '1' then
      ch_7_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_7_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_8_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_8_coeffs_rack <= '0';
      else
        ch_8_coeffs_rack <= ch_8_coeffs_re and not ch_8_coeffs_rack;
      end if;
    end if;
  end process;
  ch_8_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_8_coeffs_wp <= '0';
      else
        ch_8_coeffs_wp <= (wr_req_d0 or ch_8_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_8_coeffs_we <= (wr_req_d0 or ch_8_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_8_coeffs_re) begin
    if ch_8_coeffs_re = '1' then
      ch_8_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_8_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_9_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_9_coeffs_rack <= '0';
      else
        ch_9_coeffs_rack <= ch_9_coeffs_re and not ch_9_coeffs_rack;
      end if;
    end if;
  end process;
  ch_9_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_9_coeffs_wp <= '0';
      else
        ch_9_coeffs_wp <= (wr_req_d0 or ch_9_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_9_coeffs_we <= (wr_req_d0 or ch_9_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_9_coeffs_re) begin
    if ch_9_coeffs_re = '1' then
      ch_9_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_9_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_10_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_10_coeffs_rack <= '0';
      else
        ch_10_coeffs_rack <= ch_10_coeffs_re and not ch_10_coeffs_rack;
      end if;
    end if;
  end process;
  ch_10_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_10_coeffs_wp <= '0';
      else
        ch_10_coeffs_wp <= (wr_req_d0 or ch_10_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_10_coeffs_we <= (wr_req_d0 or ch_10_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_10_coeffs_re) begin
    if ch_10_coeffs_re = '1' then
      ch_10_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_10_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Interface ch_11_coeffs
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_11_coeffs_rack <= '0';
      else
        ch_11_coeffs_rack <= ch_11_coeffs_re and not ch_11_coeffs_rack;
      end if;
    end if;
  end process;
  ch_11_coeffs_data_o <= wr_dat_d0;
  process (clk_i) begin
    if rising_edge(clk_i) then
      if rst_n_i = '0' then
        ch_11_coeffs_wp <= '0';
      else
        ch_11_coeffs_wp <= (wr_req_d0 or ch_11_coeffs_wp) and rd_req_int;
      end if;
    end if;
  end process;
  ch_11_coeffs_we <= (wr_req_d0 or ch_11_coeffs_wp) and not rd_req_int;
  process (adr_int, wr_adr_d0, ch_11_coeffs_re) begin
    if ch_11_coeffs_re = '1' then
      ch_11_coeffs_addr_o <= adr_int(7 downto 2);
    else
      ch_11_coeffs_addr_o <= wr_adr_d0(7 downto 2);
    end if;
  end process;

  -- Register max_filt_order

  -- Register coeffs_fp_repr

  -- Process for write requests.
  process (wr_adr_d0, ch_0_coeffs_we, ch_1_coeffs_we, ch_2_coeffs_we,
           ch_3_coeffs_we, ch_4_coeffs_we, ch_5_coeffs_we, ch_6_coeffs_we,
           ch_7_coeffs_we, ch_8_coeffs_we, ch_9_coeffs_we, ch_10_coeffs_we,
           ch_11_coeffs_we, wr_req_d0) begin
    ch_0_coeffs_wr_o <= '0';
    ch_1_coeffs_wr_o <= '0';
    ch_2_coeffs_wr_o <= '0';
    ch_3_coeffs_wr_o <= '0';
    ch_4_coeffs_wr_o <= '0';
    ch_5_coeffs_wr_o <= '0';
    ch_6_coeffs_wr_o <= '0';
    ch_7_coeffs_wr_o <= '0';
    ch_8_coeffs_wr_o <= '0';
    ch_9_coeffs_wr_o <= '0';
    ch_10_coeffs_wr_o <= '0';
    ch_11_coeffs_wr_o <= '0';
    case wr_adr_d0(12 downto 8) is
    when "00000" =>
      -- Memory ch_0_coeffs
      ch_0_coeffs_wr_o <= ch_0_coeffs_we;
      wr_ack_int <= ch_0_coeffs_we;
    when "00001" =>
      -- Memory ch_1_coeffs
      ch_1_coeffs_wr_o <= ch_1_coeffs_we;
      wr_ack_int <= ch_1_coeffs_we;
    when "00010" =>
      -- Memory ch_2_coeffs
      ch_2_coeffs_wr_o <= ch_2_coeffs_we;
      wr_ack_int <= ch_2_coeffs_we;
    when "00011" =>
      -- Memory ch_3_coeffs
      ch_3_coeffs_wr_o <= ch_3_coeffs_we;
      wr_ack_int <= ch_3_coeffs_we;
    when "00100" =>
      -- Memory ch_4_coeffs
      ch_4_coeffs_wr_o <= ch_4_coeffs_we;
      wr_ack_int <= ch_4_coeffs_we;
    when "00101" =>
      -- Memory ch_5_coeffs
      ch_5_coeffs_wr_o <= ch_5_coeffs_we;
      wr_ack_int <= ch_5_coeffs_we;
    when "00110" =>
      -- Memory ch_6_coeffs
      ch_6_coeffs_wr_o <= ch_6_coeffs_we;
      wr_ack_int <= ch_6_coeffs_we;
    when "00111" =>
      -- Memory ch_7_coeffs
      ch_7_coeffs_wr_o <= ch_7_coeffs_we;
      wr_ack_int <= ch_7_coeffs_we;
    when "01000" =>
      -- Memory ch_8_coeffs
      ch_8_coeffs_wr_o <= ch_8_coeffs_we;
      wr_ack_int <= ch_8_coeffs_we;
    when "01001" =>
      -- Memory ch_9_coeffs
      ch_9_coeffs_wr_o <= ch_9_coeffs_we;
      wr_ack_int <= ch_9_coeffs_we;
    when "01010" =>
      -- Memory ch_10_coeffs
      ch_10_coeffs_wr_o <= ch_10_coeffs_we;
      wr_ack_int <= ch_10_coeffs_we;
    when "01011" =>
      -- Memory ch_11_coeffs
      ch_11_coeffs_wr_o <= ch_11_coeffs_we;
      wr_ack_int <= ch_11_coeffs_we;
    when "10000" =>
      case wr_adr_d0(7 downto 2) is
      when "000000" =>
        -- Reg max_filt_order
        wr_ack_int <= wr_req_d0;
      when "000001" =>
        -- Reg coeffs_fp_repr
        wr_ack_int <= wr_req_d0;
      when others =>
        wr_ack_int <= wr_req_d0;
      end case;
    when others =>
      wr_ack_int <= wr_req_d0;
    end case;
  end process;

  -- Process for read requests.
  process (adr_int, ch_0_coeffs_data_i, ch_0_coeffs_rack, rd_req_int,
           ch_1_coeffs_data_i, ch_1_coeffs_rack, ch_2_coeffs_data_i,
           ch_2_coeffs_rack, ch_3_coeffs_data_i, ch_3_coeffs_rack,
           ch_4_coeffs_data_i, ch_4_coeffs_rack, ch_5_coeffs_data_i,
           ch_5_coeffs_rack, ch_6_coeffs_data_i, ch_6_coeffs_rack,
           ch_7_coeffs_data_i, ch_7_coeffs_rack, ch_8_coeffs_data_i,
           ch_8_coeffs_rack, ch_9_coeffs_data_i, ch_9_coeffs_rack,
           ch_10_coeffs_data_i, ch_10_coeffs_rack, ch_11_coeffs_data_i,
           ch_11_coeffs_rack, max_filt_order_i, coeffs_fp_repr_int_width_i,
           coeffs_fp_repr_frac_width_i) begin
    -- By default ack read requests
    rd_dat_d0 <= (others => 'X');
    ch_0_coeffs_re <= '0';
    ch_1_coeffs_re <= '0';
    ch_2_coeffs_re <= '0';
    ch_3_coeffs_re <= '0';
    ch_4_coeffs_re <= '0';
    ch_5_coeffs_re <= '0';
    ch_6_coeffs_re <= '0';
    ch_7_coeffs_re <= '0';
    ch_8_coeffs_re <= '0';
    ch_9_coeffs_re <= '0';
    ch_10_coeffs_re <= '0';
    ch_11_coeffs_re <= '0';
    case adr_int(12 downto 8) is
    when "00000" =>
      -- Memory ch_0_coeffs
      rd_dat_d0 <= ch_0_coeffs_data_i;
      rd_ack_d0 <= ch_0_coeffs_rack;
      ch_0_coeffs_re <= rd_req_int;
    when "00001" =>
      -- Memory ch_1_coeffs
      rd_dat_d0 <= ch_1_coeffs_data_i;
      rd_ack_d0 <= ch_1_coeffs_rack;
      ch_1_coeffs_re <= rd_req_int;
    when "00010" =>
      -- Memory ch_2_coeffs
      rd_dat_d0 <= ch_2_coeffs_data_i;
      rd_ack_d0 <= ch_2_coeffs_rack;
      ch_2_coeffs_re <= rd_req_int;
    when "00011" =>
      -- Memory ch_3_coeffs
      rd_dat_d0 <= ch_3_coeffs_data_i;
      rd_ack_d0 <= ch_3_coeffs_rack;
      ch_3_coeffs_re <= rd_req_int;
    when "00100" =>
      -- Memory ch_4_coeffs
      rd_dat_d0 <= ch_4_coeffs_data_i;
      rd_ack_d0 <= ch_4_coeffs_rack;
      ch_4_coeffs_re <= rd_req_int;
    when "00101" =>
      -- Memory ch_5_coeffs
      rd_dat_d0 <= ch_5_coeffs_data_i;
      rd_ack_d0 <= ch_5_coeffs_rack;
      ch_5_coeffs_re <= rd_req_int;
    when "00110" =>
      -- Memory ch_6_coeffs
      rd_dat_d0 <= ch_6_coeffs_data_i;
      rd_ack_d0 <= ch_6_coeffs_rack;
      ch_6_coeffs_re <= rd_req_int;
    when "00111" =>
      -- Memory ch_7_coeffs
      rd_dat_d0 <= ch_7_coeffs_data_i;
      rd_ack_d0 <= ch_7_coeffs_rack;
      ch_7_coeffs_re <= rd_req_int;
    when "01000" =>
      -- Memory ch_8_coeffs
      rd_dat_d0 <= ch_8_coeffs_data_i;
      rd_ack_d0 <= ch_8_coeffs_rack;
      ch_8_coeffs_re <= rd_req_int;
    when "01001" =>
      -- Memory ch_9_coeffs
      rd_dat_d0 <= ch_9_coeffs_data_i;
      rd_ack_d0 <= ch_9_coeffs_rack;
      ch_9_coeffs_re <= rd_req_int;
    when "01010" =>
      -- Memory ch_10_coeffs
      rd_dat_d0 <= ch_10_coeffs_data_i;
      rd_ack_d0 <= ch_10_coeffs_rack;
      ch_10_coeffs_re <= rd_req_int;
    when "01011" =>
      -- Memory ch_11_coeffs
      rd_dat_d0 <= ch_11_coeffs_data_i;
      rd_ack_d0 <= ch_11_coeffs_rack;
      ch_11_coeffs_re <= rd_req_int;
    when "10000" =>
      case adr_int(7 downto 2) is
      when "000000" =>
        -- Reg max_filt_order
        rd_ack_d0 <= rd_req_int;
        rd_dat_d0 <= max_filt_order_i;
      when "000001" =>
        -- Reg coeffs_fp_repr
        rd_ack_d0 <= rd_req_int;
        rd_dat_d0(4 downto 0) <= coeffs_fp_repr_int_width_i;
        rd_dat_d0(9 downto 5) <= coeffs_fp_repr_frac_width_i;
        rd_dat_d0(31 downto 10) <= (others => '0');
      when others =>
        rd_ack_d0 <= rd_req_int;
      end case;
    when others =>
      rd_ack_d0 <= rd_req_int;
    end case;
  end process;
end syn;
