-------------------------------------------------------------------------------
-- Title          : Wishbone slave core for interface to internal regs and coefficient ram banks
-------------------------------------------------------------------------------
-- File           : wb_fofb_processing_regs.vhdl
-- Author         : auto-generated by wbgen2 from wb_fofb_processing_regs.wb
-- Created        : Thu Sep 15 15:38:25 2022
-- Standard       : VHDL'87
-------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_fofb_processing_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity wb_fofb_processing_regs is
  port (
    rst_n_i              : in    std_logic;
    clk_sys_i            : in    std_logic;
    wb_adr_i             : in    std_logic_vector(12 downto 0);
    wb_dat_i             : in    std_logic_vector(31 downto 0);
    wb_dat_o             : out   std_logic_vector(31 downto 0);
    wb_cyc_i             : in    std_logic;
    wb_sel_i             : in    std_logic_vector(3 downto 0);
    wb_stb_i             : in    std_logic;
    wb_we_i              : in    std_logic;
    wb_ack_o             : out   std_logic;
    wb_stall_o           : out   std_logic;
    wb_fofb_processing_regs_clk_i : in    std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'fixed-point position constant value' in reg: 'fofb processing coefficients fixed-point position constant'
    wb_fofb_processing_regs_coeffs_fixed_point_pos_val_i : in    std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulators' gains fixed-point position register'
    wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_i : in    std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_0_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_0_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_0_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_1_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_1_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_1_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_2_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_2_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_2_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_3_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_3_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_3_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_4_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_4_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_4_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_5_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_5_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_5_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_6_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_6_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_6_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_7_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_7_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_7_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_8_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_8_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_8_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_9_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_9_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_9_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_10_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_10_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_10_freeze_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) std_logic_vector field: 'value' in reg: 'fofb processing accumulator gain register (per channel)'
    wb_fofb_processing_regs_acc_gain_11_val_o : out   std_logic_vector(31 downto 0);
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) MONOSTABLE field: 'clear accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_11_clear_o : out   std_logic;
    -- Port for asynchronous (clock: wb_fofb_processing_regs_clk_i) BIT field: 'freeze accumulator bit' in reg: 'fofb processing accumulator control register (per channel)'
    wb_fofb_processing_regs_acc_ctl_11_freeze_o : out   std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_0_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_0_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_0_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_0_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_0_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_1_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_1_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_1_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_1_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_1_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_2_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_2_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_2_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_2_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_2_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_3_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_3_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_3_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_3_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_3_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_4_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_4_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_4_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_4_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_4_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_5_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_5_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_5_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_5_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_5_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_6_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_6_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_6_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_6_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_6_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_7_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_7_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_7_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_7_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_7_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_8_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_8_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_8_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_8_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_8_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_9_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_9_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_9_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_9_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_9_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_10_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_10_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_10_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_10_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_10_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing coefficients ram bank
    wb_fofb_processing_regs_coeffs_ram_bank_11_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_coeffs_ram_bank_11_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_11_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_coeffs_ram_bank_11_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_coeffs_ram_bank_11_wr_i : in    std_logic;
    -- Ports for RAM: fofb processing setpoints ram bank
    wb_fofb_processing_regs_setpoints_ram_bank_addr_i : in    std_logic_vector(8 downto 0);
    -- Read data output
    wb_fofb_processing_regs_setpoints_ram_bank_data_o : out   std_logic_vector(31 downto 0);
    -- Read strobe input (active high)
    wb_fofb_processing_regs_setpoints_ram_bank_rd_i : in    std_logic;
    -- Write data input
    wb_fofb_processing_regs_setpoints_ram_bank_data_i : in    std_logic_vector(31 downto 0);
    -- Write strobe (active high)
    wb_fofb_processing_regs_setpoints_ram_bank_wr_i : in    std_logic
  );
end wb_fofb_processing_regs;

architecture syn of wb_fofb_processing_regs is

  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb : std_logic;
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_delay : std_logic;
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_in_progress : std_logic;
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s0 : std_logic;
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s1 : std_logic;
  signal wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s2 : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_delay : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_in_progress : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s0 : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s1 : std_logic;
  signal wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_0_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_0_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_0_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_0_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_0_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_0_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_0_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_1_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_1_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_1_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_1_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_1_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_1_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_1_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_2_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_2_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_2_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_2_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_2_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_2_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_2_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_3_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_3_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_3_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_3_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_3_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_3_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_3_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_4_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_4_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_4_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_4_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_4_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_4_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_4_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_5_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_5_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_5_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_5_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_5_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_5_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_5_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_6_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_6_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_6_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_6_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_6_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_6_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_6_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_7_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_7_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_7_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_7_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_7_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_7_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_7_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_8_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_8_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_8_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_8_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_8_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_8_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_8_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_9_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_9_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_9_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_9_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_9_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_9_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_9_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_10_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_10_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_10_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_10_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_10_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_10_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_10_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_11_val_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_acc_gain_11_val_swb : std_logic;
  signal wb_fofb_processing_regs_acc_gain_11_val_swb_delay : std_logic;
  signal wb_fofb_processing_regs_acc_gain_11_val_swb_s0 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_11_val_swb_s1 : std_logic;
  signal wb_fofb_processing_regs_acc_gain_11_val_swb_s2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_clear_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_clear_int_delay : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_clear_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_clear_sync1 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_clear_sync2 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_freeze_int : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_freeze_sync0 : std_logic;
  signal wb_fofb_processing_regs_acc_ctl_11_freeze_sync1 : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_0_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_0_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_0_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_1_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_1_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_1_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_2_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_2_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_2_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_3_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_3_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_3_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_4_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_4_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_4_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_5_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_5_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_5_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_6_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_6_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_6_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_7_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_7_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_7_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_8_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_8_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_8_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_9_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_9_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_9_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_10_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_10_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_10_wr_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_11_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_coeffs_ram_bank_11_rd_int : std_logic;
  signal wb_fofb_processing_regs_coeffs_ram_bank_11_wr_int : std_logic;
  signal wb_fofb_processing_regs_setpoints_ram_bank_rddata_int : std_logic_vector(31 downto 0);
  signal wb_fofb_processing_regs_setpoints_ram_bank_rd_int : std_logic;
  signal wb_fofb_processing_regs_setpoints_ram_bank_wr_int : std_logic;
  signal ack_sreg                       : std_logic_vector(9 downto 0);
  signal rddata_reg                     : std_logic_vector(31 downto 0);
  signal wrdata_reg                     : std_logic_vector(31 downto 0);
  signal bwsel_reg                      : std_logic_vector(3 downto 0);
  signal rwaddr_reg                     : std_logic_vector(12 downto 0);
  signal ack_in_progress                : std_logic;
  signal wr_int                         : std_logic;
  signal rd_int                         : std_logic;
  signal allones                        : std_logic_vector(31 downto 0);
  signal allzeros                       : std_logic_vector(31 downto 0);

begin
  -- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
  -- 
  -- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb <= '0';
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_delay <= '0';
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_in_progress <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_delay <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_in_progress <= '0';
      wb_fofb_processing_regs_acc_gain_0_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_0_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_0_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_0_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_0_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_0_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_1_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_1_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_1_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_1_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_1_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_1_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_2_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_2_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_2_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_2_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_2_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_2_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_3_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_3_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_3_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_3_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_3_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_3_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_4_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_4_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_4_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_4_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_4_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_4_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_5_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_5_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_5_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_5_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_5_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_5_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_6_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_6_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_6_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_6_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_6_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_6_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_7_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_7_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_7_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_7_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_7_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_7_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_8_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_8_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_8_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_8_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_8_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_8_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_9_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_9_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_9_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_9_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_9_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_9_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_10_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_10_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_10_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_10_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_10_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_10_freeze_int <= '0';
      wb_fofb_processing_regs_acc_gain_11_val_int <= "00000000000000000000000000000000";
      wb_fofb_processing_regs_acc_gain_11_val_swb <= '0';
      wb_fofb_processing_regs_acc_gain_11_val_swb_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_11_clear_int <= '0';
      wb_fofb_processing_regs_acc_ctl_11_clear_int_delay <= '0';
      wb_fofb_processing_regs_acc_ctl_11_freeze_int <= '0';
    elsif rising_edge(clk_sys_i) then
      -- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_delay;
          wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_int;
            wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_in_progress <= '0';
          end if;
          wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_delay;
          wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_int;
            wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_in_progress <= '0';
          end if;
          wb_fofb_processing_regs_acc_gain_0_val_swb <= wb_fofb_processing_regs_acc_gain_0_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_0_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_0_clear_int <= wb_fofb_processing_regs_acc_ctl_0_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_0_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_1_val_swb <= wb_fofb_processing_regs_acc_gain_1_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_1_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_1_clear_int <= wb_fofb_processing_regs_acc_ctl_1_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_1_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_2_val_swb <= wb_fofb_processing_regs_acc_gain_2_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_2_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_2_clear_int <= wb_fofb_processing_regs_acc_ctl_2_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_2_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_3_val_swb <= wb_fofb_processing_regs_acc_gain_3_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_3_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_3_clear_int <= wb_fofb_processing_regs_acc_ctl_3_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_3_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_4_val_swb <= wb_fofb_processing_regs_acc_gain_4_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_4_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_4_clear_int <= wb_fofb_processing_regs_acc_ctl_4_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_4_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_5_val_swb <= wb_fofb_processing_regs_acc_gain_5_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_5_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_5_clear_int <= wb_fofb_processing_regs_acc_ctl_5_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_5_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_6_val_swb <= wb_fofb_processing_regs_acc_gain_6_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_6_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_6_clear_int <= wb_fofb_processing_regs_acc_ctl_6_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_6_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_7_val_swb <= wb_fofb_processing_regs_acc_gain_7_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_7_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_7_clear_int <= wb_fofb_processing_regs_acc_ctl_7_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_7_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_8_val_swb <= wb_fofb_processing_regs_acc_gain_8_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_8_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_8_clear_int <= wb_fofb_processing_regs_acc_ctl_8_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_8_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_9_val_swb <= wb_fofb_processing_regs_acc_gain_9_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_9_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_9_clear_int <= wb_fofb_processing_regs_acc_ctl_9_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_9_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_10_val_swb <= wb_fofb_processing_regs_acc_gain_10_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_10_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_10_clear_int <= wb_fofb_processing_regs_acc_ctl_10_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_10_clear_int_delay <= '0';
          wb_fofb_processing_regs_acc_gain_11_val_swb <= wb_fofb_processing_regs_acc_gain_11_val_swb_delay;
          wb_fofb_processing_regs_acc_gain_11_val_swb_delay <= '0';
          wb_fofb_processing_regs_acc_ctl_11_clear_int <= wb_fofb_processing_regs_acc_ctl_11_clear_int_delay;
          wb_fofb_processing_regs_acc_ctl_11_clear_int_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(12 downto 9) is
          when "0000" =>
            case rwaddr_reg(4 downto 0) is
            when "00000" =>
              if (wb_we_i = '1') then
              end if;
              if (wb_we_i = '0') then
                wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb <= '1';
                wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_delay <= '1';
                wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_in_progress <= '1';
              end if;
              ack_sreg(5) <= '1';
              ack_in_progress <= '1';
            when "00001" =>
              if (wb_we_i = '1') then
              end if;
              if (wb_we_i = '0') then
                wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb <= '1';
                wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_delay <= '1';
                wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_in_progress <= '1';
              end if;
              ack_sreg(5) <= '1';
              ack_in_progress <= '1';
            when "00010" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_0_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_0_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_0_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_0_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "00011" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_0_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_0_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_0_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_0_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "00100" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_1_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_1_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_1_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_1_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "00101" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_1_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_1_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_1_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_1_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "00110" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_2_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_2_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_2_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_2_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "00111" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_2_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_2_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_2_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_2_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "01000" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_3_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_3_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_3_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_3_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "01001" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_3_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_3_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_3_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_3_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "01010" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_4_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_4_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_4_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_4_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "01011" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_4_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_4_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_4_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_4_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "01100" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_5_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_5_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_5_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_5_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "01101" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_5_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_5_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_5_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_5_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "01110" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_6_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_6_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_6_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_6_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "01111" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_6_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_6_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_6_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_6_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "10000" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_7_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_7_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_7_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_7_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "10001" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_7_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_7_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_7_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_7_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "10010" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_8_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_8_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_8_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_8_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "10011" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_8_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_8_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_8_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_8_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "10100" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_9_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_9_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_9_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_9_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "10101" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_9_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_9_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_9_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_9_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "10110" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_10_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_10_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_10_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_10_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "10111" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_10_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_10_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_10_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_10_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when "11000" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_gain_11_val_int <= wrdata_reg(31 downto 0);
                wb_fofb_processing_regs_acc_gain_11_val_swb <= '1';
                wb_fofb_processing_regs_acc_gain_11_val_swb_delay <= '1';
              end if;
              rddata_reg(31 downto 0) <= wb_fofb_processing_regs_acc_gain_11_val_int;
              ack_sreg(3) <= '1';
              ack_in_progress <= '1';
            when "11001" =>
              if (wb_we_i = '1') then
                wb_fofb_processing_regs_acc_ctl_11_clear_int <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_11_clear_int_delay <= wrdata_reg(0);
                wb_fofb_processing_regs_acc_ctl_11_freeze_int <= wrdata_reg(1);
              end if;
              rddata_reg(0) <= '0';
              rddata_reg(1) <= wb_fofb_processing_regs_acc_ctl_11_freeze_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(4) <= '1';
              ack_in_progress <= '1';
            when others =>
              -- prevent the slave from hanging the bus on invalid address
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end case;
          when "0001" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0010" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0011" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0100" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0101" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0110" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "0111" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1000" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1001" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1010" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1011" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1100" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when "1101" =>
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when others =>
            -- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;


  -- Data output multiplexer process
  process (rddata_reg, rwaddr_reg, wb_fofb_processing_regs_coeffs_ram_bank_0_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_1_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_2_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_3_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_4_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_5_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_6_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_7_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_8_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_9_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_10_rddata_int, wb_fofb_processing_regs_coeffs_ram_bank_11_rddata_int, wb_fofb_processing_regs_setpoints_ram_bank_rddata_int, wb_adr_i  )
  begin
    case rwaddr_reg(12 downto 9) is
    when "0001" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_0_rddata_int;
    when "0010" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_1_rddata_int;
    when "0011" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_2_rddata_int;
    when "0100" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_3_rddata_int;
    when "0101" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_4_rddata_int;
    when "0110" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_5_rddata_int;
    when "0111" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_6_rddata_int;
    when "1000" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_7_rddata_int;
    when "1001" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_8_rddata_int;
    when "1010" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_9_rddata_int;
    when "1011" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_10_rddata_int;
    when "1100" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_coeffs_ram_bank_11_rddata_int;
    when "1101" =>
      wb_dat_o(31 downto 0) <= wb_fofb_processing_regs_setpoints_ram_bank_rddata_int;
    when others =>
      wb_dat_o <= rddata_reg;
    end case;
  end process;


  -- Read & write lines decoder for RAMs
  process (wb_adr_i, rd_int, wr_int  )
  begin
    if (wb_adr_i(12 downto 9) = "0001") then
      wb_fofb_processing_regs_coeffs_ram_bank_0_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_0_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_0_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_0_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0010") then
      wb_fofb_processing_regs_coeffs_ram_bank_1_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_1_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_1_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_1_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0011") then
      wb_fofb_processing_regs_coeffs_ram_bank_2_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_2_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_2_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_2_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0100") then
      wb_fofb_processing_regs_coeffs_ram_bank_3_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_3_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_3_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_3_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0101") then
      wb_fofb_processing_regs_coeffs_ram_bank_4_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_4_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_4_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_4_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0110") then
      wb_fofb_processing_regs_coeffs_ram_bank_5_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_5_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_5_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_5_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "0111") then
      wb_fofb_processing_regs_coeffs_ram_bank_6_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_6_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_6_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_6_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1000") then
      wb_fofb_processing_regs_coeffs_ram_bank_7_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_7_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_7_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_7_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1001") then
      wb_fofb_processing_regs_coeffs_ram_bank_8_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_8_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_8_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_8_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1010") then
      wb_fofb_processing_regs_coeffs_ram_bank_9_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_9_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_9_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_9_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1011") then
      wb_fofb_processing_regs_coeffs_ram_bank_10_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_10_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_10_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_10_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1100") then
      wb_fofb_processing_regs_coeffs_ram_bank_11_rd_int <= rd_int;
      wb_fofb_processing_regs_coeffs_ram_bank_11_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_coeffs_ram_bank_11_wr_int <= '0';
      wb_fofb_processing_regs_coeffs_ram_bank_11_rd_int <= '0';
    end if;
    if (wb_adr_i(12 downto 9) = "1101") then
      wb_fofb_processing_regs_setpoints_ram_bank_rd_int <= rd_int;
      wb_fofb_processing_regs_setpoints_ram_bank_wr_int <= wr_int;
    else
      wb_fofb_processing_regs_setpoints_ram_bank_wr_int <= '0';
      wb_fofb_processing_regs_setpoints_ram_bank_rd_int <= '0';
    end if;
  end process;


  -- fixed-point position constant value
  -- asynchronous std_logic_vector register : fixed-point position constant value (type RO/WO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s0 <= '0';
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s1 <= '0';
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s2 <= '0';
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_int <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s0 <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb;
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s1 <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s0;
      wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s2 <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s1;
      if ((wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s1 = '1') and (wb_fofb_processing_regs_coeffs_fixed_point_pos_val_lwb_s2 = '0')) then
        wb_fofb_processing_regs_coeffs_fixed_point_pos_val_int <= wb_fofb_processing_regs_coeffs_fixed_point_pos_val_i;
      end if;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RO/WO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s0 <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s1 <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s2 <= '0';
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_int <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s0 <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb;
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s1 <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s0;
      wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s2 <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s1;
      if ((wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s1 = '1') and (wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_lwb_s2 = '0')) then
        wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_int <= wb_fofb_processing_regs_accs_gains_fixed_point_pos_val_i;
      end if;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_0_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_0_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_0_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_0_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_0_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_0_val_swb;
      wb_fofb_processing_regs_acc_gain_0_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_0_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_0_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_0_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_0_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_0_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_0_val_o <= wb_fofb_processing_regs_acc_gain_0_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_0_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_0_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_0_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_0_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_0_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_0_clear_int;
      wb_fofb_processing_regs_acc_ctl_0_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_0_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_0_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_0_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_0_clear_o <= wb_fofb_processing_regs_acc_ctl_0_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_0_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_0_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_0_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_0_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_0_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_0_freeze_int;
      wb_fofb_processing_regs_acc_ctl_0_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_0_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_0_freeze_o <= wb_fofb_processing_regs_acc_ctl_0_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_1_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_1_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_1_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_1_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_1_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_1_val_swb;
      wb_fofb_processing_regs_acc_gain_1_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_1_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_1_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_1_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_1_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_1_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_1_val_o <= wb_fofb_processing_regs_acc_gain_1_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_1_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_1_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_1_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_1_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_1_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_1_clear_int;
      wb_fofb_processing_regs_acc_ctl_1_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_1_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_1_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_1_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_1_clear_o <= wb_fofb_processing_regs_acc_ctl_1_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_1_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_1_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_1_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_1_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_1_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_1_freeze_int;
      wb_fofb_processing_regs_acc_ctl_1_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_1_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_1_freeze_o <= wb_fofb_processing_regs_acc_ctl_1_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_2_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_2_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_2_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_2_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_2_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_2_val_swb;
      wb_fofb_processing_regs_acc_gain_2_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_2_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_2_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_2_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_2_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_2_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_2_val_o <= wb_fofb_processing_regs_acc_gain_2_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_2_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_2_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_2_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_2_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_2_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_2_clear_int;
      wb_fofb_processing_regs_acc_ctl_2_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_2_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_2_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_2_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_2_clear_o <= wb_fofb_processing_regs_acc_ctl_2_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_2_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_2_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_2_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_2_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_2_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_2_freeze_int;
      wb_fofb_processing_regs_acc_ctl_2_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_2_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_2_freeze_o <= wb_fofb_processing_regs_acc_ctl_2_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_3_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_3_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_3_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_3_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_3_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_3_val_swb;
      wb_fofb_processing_regs_acc_gain_3_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_3_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_3_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_3_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_3_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_3_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_3_val_o <= wb_fofb_processing_regs_acc_gain_3_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_3_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_3_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_3_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_3_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_3_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_3_clear_int;
      wb_fofb_processing_regs_acc_ctl_3_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_3_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_3_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_3_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_3_clear_o <= wb_fofb_processing_regs_acc_ctl_3_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_3_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_3_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_3_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_3_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_3_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_3_freeze_int;
      wb_fofb_processing_regs_acc_ctl_3_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_3_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_3_freeze_o <= wb_fofb_processing_regs_acc_ctl_3_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_4_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_4_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_4_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_4_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_4_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_4_val_swb;
      wb_fofb_processing_regs_acc_gain_4_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_4_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_4_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_4_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_4_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_4_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_4_val_o <= wb_fofb_processing_regs_acc_gain_4_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_4_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_4_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_4_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_4_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_4_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_4_clear_int;
      wb_fofb_processing_regs_acc_ctl_4_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_4_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_4_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_4_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_4_clear_o <= wb_fofb_processing_regs_acc_ctl_4_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_4_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_4_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_4_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_4_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_4_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_4_freeze_int;
      wb_fofb_processing_regs_acc_ctl_4_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_4_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_4_freeze_o <= wb_fofb_processing_regs_acc_ctl_4_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_5_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_5_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_5_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_5_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_5_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_5_val_swb;
      wb_fofb_processing_regs_acc_gain_5_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_5_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_5_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_5_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_5_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_5_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_5_val_o <= wb_fofb_processing_regs_acc_gain_5_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_5_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_5_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_5_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_5_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_5_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_5_clear_int;
      wb_fofb_processing_regs_acc_ctl_5_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_5_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_5_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_5_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_5_clear_o <= wb_fofb_processing_regs_acc_ctl_5_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_5_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_5_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_5_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_5_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_5_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_5_freeze_int;
      wb_fofb_processing_regs_acc_ctl_5_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_5_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_5_freeze_o <= wb_fofb_processing_regs_acc_ctl_5_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_6_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_6_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_6_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_6_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_6_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_6_val_swb;
      wb_fofb_processing_regs_acc_gain_6_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_6_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_6_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_6_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_6_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_6_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_6_val_o <= wb_fofb_processing_regs_acc_gain_6_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_6_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_6_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_6_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_6_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_6_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_6_clear_int;
      wb_fofb_processing_regs_acc_ctl_6_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_6_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_6_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_6_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_6_clear_o <= wb_fofb_processing_regs_acc_ctl_6_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_6_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_6_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_6_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_6_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_6_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_6_freeze_int;
      wb_fofb_processing_regs_acc_ctl_6_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_6_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_6_freeze_o <= wb_fofb_processing_regs_acc_ctl_6_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_7_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_7_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_7_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_7_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_7_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_7_val_swb;
      wb_fofb_processing_regs_acc_gain_7_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_7_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_7_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_7_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_7_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_7_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_7_val_o <= wb_fofb_processing_regs_acc_gain_7_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_7_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_7_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_7_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_7_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_7_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_7_clear_int;
      wb_fofb_processing_regs_acc_ctl_7_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_7_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_7_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_7_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_7_clear_o <= wb_fofb_processing_regs_acc_ctl_7_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_7_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_7_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_7_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_7_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_7_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_7_freeze_int;
      wb_fofb_processing_regs_acc_ctl_7_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_7_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_7_freeze_o <= wb_fofb_processing_regs_acc_ctl_7_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_8_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_8_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_8_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_8_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_8_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_8_val_swb;
      wb_fofb_processing_regs_acc_gain_8_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_8_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_8_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_8_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_8_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_8_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_8_val_o <= wb_fofb_processing_regs_acc_gain_8_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_8_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_8_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_8_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_8_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_8_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_8_clear_int;
      wb_fofb_processing_regs_acc_ctl_8_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_8_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_8_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_8_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_8_clear_o <= wb_fofb_processing_regs_acc_ctl_8_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_8_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_8_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_8_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_8_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_8_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_8_freeze_int;
      wb_fofb_processing_regs_acc_ctl_8_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_8_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_8_freeze_o <= wb_fofb_processing_regs_acc_ctl_8_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_9_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_9_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_9_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_9_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_9_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_9_val_swb;
      wb_fofb_processing_regs_acc_gain_9_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_9_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_9_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_9_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_9_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_9_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_9_val_o <= wb_fofb_processing_regs_acc_gain_9_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_9_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_9_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_9_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_9_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_9_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_9_clear_int;
      wb_fofb_processing_regs_acc_ctl_9_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_9_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_9_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_9_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_9_clear_o <= wb_fofb_processing_regs_acc_ctl_9_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_9_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_9_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_9_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_9_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_9_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_9_freeze_int;
      wb_fofb_processing_regs_acc_ctl_9_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_9_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_9_freeze_o <= wb_fofb_processing_regs_acc_ctl_9_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_10_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_10_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_10_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_10_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_10_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_10_val_swb;
      wb_fofb_processing_regs_acc_gain_10_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_10_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_10_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_10_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_10_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_10_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_10_val_o <= wb_fofb_processing_regs_acc_gain_10_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_10_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_10_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_10_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_10_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_10_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_10_clear_int;
      wb_fofb_processing_regs_acc_ctl_10_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_10_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_10_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_10_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_10_clear_o <= wb_fofb_processing_regs_acc_ctl_10_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_10_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_10_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_10_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_10_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_10_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_10_freeze_int;
      wb_fofb_processing_regs_acc_ctl_10_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_10_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_10_freeze_o <= wb_fofb_processing_regs_acc_ctl_10_freeze_sync1;
    end if;
  end process;


  -- value
  -- asynchronous std_logic_vector register : value (type RW/RO, wb_fofb_processing_regs_clk_i <-> clk_sys_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_gain_11_val_swb_s0 <= '0';
      wb_fofb_processing_regs_acc_gain_11_val_swb_s1 <= '0';
      wb_fofb_processing_regs_acc_gain_11_val_swb_s2 <= '0';
      wb_fofb_processing_regs_acc_gain_11_val_o <= "00000000000000000000000000000000";
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_gain_11_val_swb_s0 <= wb_fofb_processing_regs_acc_gain_11_val_swb;
      wb_fofb_processing_regs_acc_gain_11_val_swb_s1 <= wb_fofb_processing_regs_acc_gain_11_val_swb_s0;
      wb_fofb_processing_regs_acc_gain_11_val_swb_s2 <= wb_fofb_processing_regs_acc_gain_11_val_swb_s1;
      if ((wb_fofb_processing_regs_acc_gain_11_val_swb_s2 = '0') and (wb_fofb_processing_regs_acc_gain_11_val_swb_s1 = '1')) then
        wb_fofb_processing_regs_acc_gain_11_val_o <= wb_fofb_processing_regs_acc_gain_11_val_int;
      end if;
    end if;
  end process;


  -- clear accumulator bit
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_11_clear_o <= '0';
      wb_fofb_processing_regs_acc_ctl_11_clear_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_11_clear_sync1 <= '0';
      wb_fofb_processing_regs_acc_ctl_11_clear_sync2 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_11_clear_sync0 <= wb_fofb_processing_regs_acc_ctl_11_clear_int;
      wb_fofb_processing_regs_acc_ctl_11_clear_sync1 <= wb_fofb_processing_regs_acc_ctl_11_clear_sync0;
      wb_fofb_processing_regs_acc_ctl_11_clear_sync2 <= wb_fofb_processing_regs_acc_ctl_11_clear_sync1;
      wb_fofb_processing_regs_acc_ctl_11_clear_o <= wb_fofb_processing_regs_acc_ctl_11_clear_sync2 and (not wb_fofb_processing_regs_acc_ctl_11_clear_sync1);
    end if;
  end process;


  -- freeze accumulator bit
  -- synchronizer chain for field : freeze accumulator bit (type RW/RO, clk_sys_i <-> wb_fofb_processing_regs_clk_i)
  process (wb_fofb_processing_regs_clk_i, rst_n_i)
  begin
    if (rst_n_i = '0') then
      wb_fofb_processing_regs_acc_ctl_11_freeze_o <= '0';
      wb_fofb_processing_regs_acc_ctl_11_freeze_sync0 <= '0';
      wb_fofb_processing_regs_acc_ctl_11_freeze_sync1 <= '0';
    elsif rising_edge(wb_fofb_processing_regs_clk_i) then
      wb_fofb_processing_regs_acc_ctl_11_freeze_sync0 <= wb_fofb_processing_regs_acc_ctl_11_freeze_int;
      wb_fofb_processing_regs_acc_ctl_11_freeze_sync1 <= wb_fofb_processing_regs_acc_ctl_11_freeze_sync0;
      wb_fofb_processing_regs_acc_ctl_11_freeze_o <= wb_fofb_processing_regs_acc_ctl_11_freeze_sync1;
    end if;
  end process;


  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_0_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_0_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_0_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_0_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_0_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_0_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_0_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_0_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_0_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_1_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_1_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_1_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_1_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_1_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_1_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_1_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_1_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_1_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_2_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_2_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_2_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_2_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_2_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_2_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_2_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_2_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_2_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_3_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_3_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_3_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_3_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_3_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_3_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_3_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_3_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_3_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_4_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_4_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_4_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_4_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_4_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_4_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_4_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_4_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_4_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_5_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_5_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_5_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_5_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_5_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_5_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_5_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_5_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_5_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_6_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_6_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_6_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_6_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_6_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_6_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_6_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_6_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_6_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_7_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_7_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_7_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_7_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_7_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_7_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_7_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_7_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_7_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_8_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_8_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_8_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_8_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_8_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_8_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_8_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_8_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_8_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_9_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_9_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_9_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_9_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_9_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_9_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_9_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_9_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_9_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_10_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_10_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_10_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_10_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_10_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_10_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_10_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_10_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_10_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing coefficients ram bank
  -- RAM block instantiation for memory: fofb processing coefficients ram bank
  wb_fofb_processing_regs_coeffs_ram_bank_11_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_11_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_coeffs_ram_bank_11_data_o,
      rd_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_11_rd_i,
      data_b_i             => wb_fofb_processing_regs_coeffs_ram_bank_11_data_i,
      wr_b_i               => wb_fofb_processing_regs_coeffs_ram_bank_11_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_coeffs_ram_bank_11_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_11_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_coeffs_ram_bank_11_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  -- extra code for reg/fifo/mem: fofb processing setpoints ram bank
  -- RAM block instantiation for memory: fofb processing setpoints ram bank
  wb_fofb_processing_regs_setpoints_ram_bank_raminst: wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 512,
      g_addr_width         => 9,
      g_dual_clock         => true,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => wb_fofb_processing_regs_clk_i,
      addr_b_i             => wb_fofb_processing_regs_setpoints_ram_bank_addr_i,
      addr_a_i             => rwaddr_reg(8 downto 0),
      data_b_o             => wb_fofb_processing_regs_setpoints_ram_bank_data_o,
      rd_b_i               => wb_fofb_processing_regs_setpoints_ram_bank_rd_i,
      data_b_i             => wb_fofb_processing_regs_setpoints_ram_bank_data_i,
      wr_b_i               => wb_fofb_processing_regs_setpoints_ram_bank_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => wb_fofb_processing_regs_setpoints_ram_bank_rddata_int(31 downto 0),
      rd_a_i               => wb_fofb_processing_regs_setpoints_ram_bank_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => wb_fofb_processing_regs_setpoints_ram_bank_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
  -- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
